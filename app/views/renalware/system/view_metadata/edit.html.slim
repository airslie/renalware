
/ To remember
/ We have klass.columns which are the actual SQL view columns
/ We view (view metadata) columns, which is an array of hashes, each representing a column
/ with its title. and width. Its position comes from the position inthe array.
/
/ Here loop through all avail columns on klass and find the matching
/ col in view.columns. If there are columns we don't recognise (the view config is stale) they
/ will be discarded when we save. If there are new cols we given them an empty object and it will be
/ saved away.
/ We need to handle validation
/ also serialisation - see https://nandovieira.com/using-postgresql-and-jsonb-with-ruby-on-rails

ruby:
  # attribute_names = klass.columns.map(&:name) - %w(id secure_id document)
  # view.columns = attribute_names.map do |attr|
  #  view.columns.detect{ |col| col.code == attr } || Renalware::System::ColumnDefinition.new(code: attr)
  # end

  attribute_names = klass.columns.map(&:name) - %w(id secure_id document)
  attribute_names = (view.columns.map(&:code) + attribute_names).uniq
  view.columns = attribute_names.map do |attr|
    view.columns.detect{ |col| col.code == attr } || Renalware::System::ColumnDefinition.new(code: attr)
  end


= simple_form_for(view, as: "view_metadata", method: :patch) do |f|
  = f.input :id, as: :hidden
  .modal
    .modal__header
      = render "renalware/shared/modal_close_link"
      - title = [view.category&.humanize, view.scope&.humanize, view.title&.humanize].join(" / ")
      h2= "Edit columns for #{title}"
    .modal__body(style="max-height: 400px")
      table.sortables(style="list-style-type: none;")
        thead(style="position: sticky; top: 0; background-color:#fff;")
          th.col-width-tiny
          th.col-width-medium SQL column name
          th.col-width-tiny Hide
          th Display name
          th.col-width-medium Width
          th.col-width-tiny Truncate

        tbody
          - view.columns.each_with_index do |col, idx|

            tr.sortable
                td.handle
                  i.fas.fa-bars
                  input(type="hidden" name="view_metadata[columns][][code]" value=col.code)
                td= col.code
                td
                  input(type="checkbox" name="view_metadata[columns][][hidden]" checked=col.hidden)
                td
                  input(type="text" name="view_metadata[columns][][name]" value=col.name)
                td
                  select(name="view_metadata[columns][][width]")
                    option(value="")
                    - Renalware::System::ColumnDefinition.new.width_values.each do |val, x|
                      option(value=val selected=(col.width == val.to_s))=val.to_s.humanize
                td
                  input(type="checkbox" name="view_metadata[columns][][truncate]" checked=col.truncate)

                  / fc.input(type="checkbox" value=col checked=view.columns.include?(col) name="view_metadata[columns][visible]")
                  / input(bestchecked=view.columns.include?(col) name="view_metadata[columns][title]")
                  / label(class="" for="view_metadata_columns_#{col}" style="display: inline-block; width: auto")= col.humanize

    .modal__footer
      br
      .right
        = f.submit "Save", class: "button"
        span= " or "
        = link_to "Cancel",
                "#",
                "aria-label" => "Close",
                  class: "reveal-modal-close"



javascript:
  initSortables();
